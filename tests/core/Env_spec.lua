local Env = require('vgit.core.Env')

local eq = assert.are.same

describe('Env', function()
  describe('set', function()
    it('should throw an error if type is not a string', function()
      assert.has_error(function()
        Env:set('string', function() end)
      end)
      assert.has_error(function()
        Env:set(3, {})
      end)
      assert.has_error(function()
        Env:set(3, { 'hello' })
      end)
    end)

    it('should set a value', function()
      Env:set('foo', 'bar')
      Env:set('bar', 3)
      Env:set('baz', true)
      assert(Env:get('foo'))
      assert(Env:get('bar'))
      assert(Env:get('baz'))
    end)
  end)

  describe('get', function()
    it('should throw an error if type is not a string', function()
      assert.has_error(function()
        Env:get(3)
      end)
    end)
    it('should retrieve a value that has been set', function()
      eq(Env:set('foo', 'bar'):get('foo'), 'bar')
    end)
  end)

  describe('unset', function()
    it('should throw an error if type is not a string', function()
      assert.has_error(function()
        Env:unset(3)
      end)
    end)
    it('should throw an error if value is not set', function()
      assert.has_error(function()
        Env:unset('hello')
      end)
    end)
    it('should unset a key that has been set', function()
      eq(Env:set('foo', 'bar'):get('foo'), 'bar')
      Env:unset('foo')
      eq(Env:get('foo'), nil)
    end)
  end)
end)
